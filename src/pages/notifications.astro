---
import BaseHead from '../components/BaseHead.astro';
import HeadPwa from '../components/HeadPwa.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import NotificationTest from '../components/NotificationTest.astro';
import FirebaseMessagingExample from '../components/FirebaseMessagingExample.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---

<html lang="en">
  <head>
    <BaseHead
      title={`${SITE_TITLE} - Notifications`}
      description={SITE_DESCRIPTION}
    />
    <HeadPwa />
  </head>
  <body>
    <Header />
    <main>
      <h1 class="mb-4 text-2xl font-bold">Notifications</h1>

      <div class="mb-6 rounded border bg-white p-4 shadow">
        <h2 class="mb-2 text-xl font-semibold">Notification Settings</h2>

        <div class="mb-4">
          <p class="mb-2">
            Current permission status: <span
              id="permission-status"
              class="font-medium">Checking...</span>
          </p>

          <button
            id="request-permission-btn"
            class="rounded bg-primary px-3 py-1 text-sm text-white hover:bg-primary/90"
          >
            Request Permission
          </button>
        </div>

        <div class="mb-4">
          <h3 class="mb-2 text-lg font-medium">About Notifications</h3>
          <p class="mb-2 text-sm">Enabling notifications allows us to:</p>
          <ul class="mb-2 ml-2 list-inside list-disc text-sm">
            <li>Keep you updated with important information</li>
            <li>Alert you about new features or content</li>
            <li>Notify you of responses to your activity</li>
          </ul>
          <p class="text-sm text-gray-600">
            You can always disable notifications later through your browser
            settings.
          </p>
        </div>

        <div
          id="token-info"
          class="mt-6 mb-4 hidden rounded bg-gray-50 p-3 text-sm"
        >
          <h3 class="mb-1 font-medium">Device Token</h3>
          <p class="font-mono text-xs break-all" id="fcm-token">
            Not available
          </p>
          <p class="mt-1 text-xs text-gray-500">
            This token uniquely identifies your device for receiving push
            notifications.
          </p>
        </div>
      </div>

      <NotificationTest />

      <FirebaseMessagingExample />
    </main>
    <Footer />

    <script>
      import { notificationService } from '../services/NotificationService';

      // Elements
      const permissionStatus = document.getElementById('permission-status');
      const requestPermissionBtn = document.getElementById(
        'request-permission-btn',
      );
      const tokenInfo = document.getElementById('token-info');
      const fcmTokenElement = document.getElementById('fcm-token');

      // Update permission status display
      const updatePermissionStatus = () => {
        const status = notificationService.getPermissionStatus();

        if (permissionStatus) {
          permissionStatus.textContent = status;

          // Add styling based on status
          permissionStatus.className = 'font-medium';
          if (status === 'granted') {
            permissionStatus.classList.add('text-green-600');
          } else if (status === 'denied') {
            permissionStatus.classList.add('text-red-600');
          } else {
            permissionStatus.classList.add('text-yellow-600');
          }
        }

        // Show token info if permission is granted
        if (status === 'granted' && tokenInfo) {
          tokenInfo.classList.remove('hidden');
          updateFCMToken();
        }
      };

      // Update FCM token display
      const updateFCMToken = async () => {
        if (fcmTokenElement) {
          try {
            const token = await notificationService.getFCMToken();
            fcmTokenElement.textContent = token || 'Not available';
          } catch (error) {
            fcmTokenElement.textContent = 'Error getting token';
            console.error('Error fetching FCM token:', error);
          }
        }
      };

      // Handle request permission button click
      if (requestPermissionBtn) {
        requestPermissionBtn.addEventListener('click', async () => {
          try {
            await notificationService.requestPermission();
            updatePermissionStatus();
          } catch (error) {
            console.error('Error requesting permission:', error);
            if (permissionStatus) {
              permissionStatus.textContent = 'Error requesting permission';
              permissionStatus.classList.add('text-red-600');
            }
          }
        });
      }

      // Initialize on page load
      updatePermissionStatus();
    </script>
  </body>
</html>
