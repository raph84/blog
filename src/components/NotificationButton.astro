---
// NotificationButton.astro
---

<div class="notification-button inline-flex items-center justify-center">
  <button
    class="flex h-8 w-8 items-center justify-center rounded-md text-black hover:bg-gray-100 focus:outline-none"
    id="notification-button"
    aria-label="Enable notifications"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="20"
      height="20"
      fill="currentColor"
      viewBox="0 0 256 256"
      class="notification-icon"
    >
      <path
        d="M221.8,175.94C216.25,166.38,208,139.33,208,104a80,80,0,1,0-160,0c0,35.34-8.26,62.38-13.81,71.94A16,16,0,0,0,48,200H88.81a40,40,0,0,0,78.38,0H208a16,16,0,0,0,13.8-24.06ZM128,216a24,24,0,0,1-22.62-16h45.24A24,24,0,0,1,128,216ZM48,184c7.7-13.24,16-43.92,16-80a64,64,0,1,1,128,0c0,36.05,8.28,66.73,16,80Z"
      ></path>
    </svg>
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="20"
      height="20"
      fill="currentColor"
      viewBox="0 0 256 256"
      class="notification-icon-active hidden"
    >
      <path
        d="M224,71.1a8,8,0,0,1-10.78-3.42,94.13,94.13,0,0,0-33.46-36.91,8,8,0,1,1,8.48-13.54,111.46,111.46,0,0,1,39.18,43.09A8,8,0,0,1,224,71.1ZM35.71,72a8,8,0,0,0,7.1-4.32A94.13,94.13,0,0,1,76.27,30.77a8,8,0,1,0-8.48-13.54A111.46,111.46,0,0,0,28.61,60.32,8,8,0,0,0,35.71,72Zm186.1,103.94C215.34,166.37,208,139.24,208,104a80,80,0,0,0-160,0c0,35.23-7.34,62.37-13.81,71.94A16,16,0,0,0,48,200H88.81a40,40,0,0,0,78.38,0H208a16,16,0,0,0,13.81-24.06Z"
      ></path>
    </svg>
  </button>
</div>

<style>
  .notification-button {
    position: relative;
  }

  .notification-button::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 8px;
    height: 8px;
    background-color: #f00;
    border-radius: 50%;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .notification-button.has-notification::after {
    opacity: 1;
  }
</style>

<script>
  import { notificationService } from '../services/NotificationService';

  // Get the button element
  const notificationButton = document.getElementById('notification-button');
  const notificationIcon = document.querySelector('.notification-icon');
  const notificationIconActive = document.querySelector(
    '.notification-icon-active',
  );

  // Function to update the button state based on permission
  const updateButtonState = () => {
    const permission = notificationService.getPermissionStatus();
    if (permission === 'granted') {
      notificationIcon?.classList.add('hidden');
      notificationIconActive?.classList.remove('hidden');
    } else {
      notificationIcon?.classList.remove('hidden');
      notificationIconActive?.classList.add('hidden');
    }
  };

  // Initialize button state
  updateButtonState();

  // Handle notification button click
  if (notificationButton) {
    notificationButton.addEventListener('click', async () => {
      try {
        const granted = await notificationService.requestPermission();
        updateButtonState();

        // Show a welcome notification if permission was granted
        if (granted) {
          notificationService.showLocalNotification(
            'Notifications Enabled!',
            'You will now receive important updates',
            { type: 'welcome' },
          );
        }
      } catch (error) {
        console.error('Error requesting notification permission:', error);
      }
    });
  }

  // Listen for notifications to show an indicator
  const unsubscribe = notificationService.onNotificationReceived((_payload) => {
    // Add a class to show the notification indicator
    notificationButton?.classList.add('has-notification');

    // Remove the indicator when the button is clicked
    const removeIndicator = () => {
      notificationButton?.classList.remove('has-notification');
      notificationButton?.removeEventListener('click', removeIndicator);
    };

    notificationButton?.addEventListener('click', removeIndicator);
  });

  // Cleanup when component unmounts
  document.addEventListener('astro:unmount', () => {
    unsubscribe();
  });
</script>
