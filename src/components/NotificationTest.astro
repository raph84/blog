---
// NotificationTest.astro - A component to test sending notifications
---

<div class="notification-test my-4 rounded border bg-white p-4 shadow">
  <h2 class="mb-4 text-xl font-bold">Test Notifications</h2>

  <div class="grid gap-3">
    <div>
      <label for="notification-title" class="mb-1 block text-sm font-medium"
        >Title</label
      >
      <input
        type="text"
        id="notification-title"
        class="w-full rounded border p-2"
        value="Test Notification"
      />
    </div>

    <div>
      <label for="notification-body" class="mb-1 block text-sm font-medium"
        >Message</label
      >
      <textarea id="notification-body" class="h-24 w-full rounded border p-2"
        >This is a test notification message.</textarea
      >
    </div>

    <div>
      <label for="notification-delay" class="mb-1 block text-sm font-medium"
        >Delay (seconds)</label
      >
      <input
        type="number"
        id="notification-delay"
        class="w-full rounded border p-2"
        min="0"
        max="60"
        value="0"
      />
    </div>

    <div class="pt-2">
      <button
        id="send-notification-btn"
        class="rounded bg-primary px-4 py-2 text-white hover:bg-primary/90"
      >
        Send Test Notification
      </button>
    </div>
  </div>

  <div class="mt-4">
    <h3 class="mb-2 font-medium">Notification Status</h3>
    <div id="notification-status" class="rounded bg-gray-100 p-2 text-sm">
      Not initialized
    </div>
  </div>
</div>

<script>
  import { notificationService } from '../services/NotificationService';

  // DOM elements
  const sendButton = document.getElementById('send-notification-btn');
  const titleInput = document.getElementById(
    'notification-title',
  ) as HTMLInputElement;
  const bodyInput = document.getElementById(
    'notification-body',
  ) as HTMLTextAreaElement;
  const delayInput = document.getElementById(
    'notification-delay',
  ) as HTMLInputElement;
  const statusDiv = document.getElementById('notification-status');

  // Update status display
  const updateStatus = (message: string, isError = false) => {
    if (statusDiv) {
      statusDiv.textContent = message;
      statusDiv.className = `text-sm p-2 rounded ${isError ? 'bg-red-100' : 'bg-gray-100'}`;
    }
  };

  // Initialize
  const initialize = () => {
    const permissionStatus = notificationService.getPermissionStatus();
    updateStatus(`Notification permission: ${permissionStatus}`);
  };

  // Send test notification
  const sendTestNotification = async () => {
    const title = titleInput?.value || 'Test Notification';
    const body = bodyInput?.value || 'This is a test notification';
    const delay = parseInt(delayInput?.value || '0', 10) * 1000;

    const permissionStatus = notificationService.getPermissionStatus();

    if (permissionStatus !== 'granted') {
      updateStatus(
        'Notification permission not granted. Please enable notifications first.',
        true,
      );

      // Try to request permission
      try {
        const granted = await notificationService.requestPermission();
        if (!granted) {
          updateStatus('Permission denied. Cannot send notifications.', true);
          return;
        }
      } catch (error) {
        updateStatus(
          'Error requesting permission: ' + (error as Error).message,
          true,
        );
        return;
      }
    }

    try {
      // Show status as pending if there's a delay
      if (delay > 0) {
        updateStatus(`Notification will be sent in ${delay / 1000} seconds...`);

        setTimeout(() => {
          const success = notificationService.showLocalNotification(
            title,
            body,
            { type: 'test', timestamp: new Date().toISOString() },
          );

          updateStatus(
            success
              ? `Notification sent at ${new Date().toLocaleTimeString()}`
              : 'Failed to send notification',
            !success,
          );
        }, delay);
      } else {
        // Send immediately
        const success = notificationService.showLocalNotification(title, body, {
          type: 'test',
          timestamp: new Date().toISOString(),
        });

        updateStatus(
          success
            ? `Notification sent at ${new Date().toLocaleTimeString()}`
            : 'Failed to send notification',
          !success,
        );
      }
    } catch (error) {
      updateStatus(
        'Error sending notification: ' + (error as Error).message,
        true,
      );
    }
  };

  // Set up event listeners
  if (sendButton) {
    sendButton.addEventListener('click', sendTestNotification);
  }

  // Initialize on load
  initialize();
</script>
